name: Build and Release KVCache C++ Packages

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # 允许手动触发

# 添加权限设置
permissions:
  contents: write
  actions: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Ubuntu 20.04"
            system_name: "ubuntu20.04"
          
          - name: "Ubuntu 22.04"
            system_name: "ubuntu22.04"
          
          - name: "ManyLinux 2014"
            system_name: "manylinux_2014"
    
    runs-on: ubuntu-latest

    name: Build on ${{ matrix.name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Install Docker (if needed)
      run: |
        # 确保Docker服务正在运行
        sudo systemctl start docker
        sudo systemctl enable docker
        
        # 验证Docker安装
        docker --version
        docker info
        
    - name: Create output directories
      run: |
        mkdir -p .output .output_logs
        
    - name: Build Packages using Container
      run: |
        # 显示系统信息
        echo "Building for system: ${{ matrix.system_name }}"
        echo "Architecture: $(uname -m)"
        
        # 使用 pack_in_container.py 脚本进行构建
        python3 pack_in_container.py --system-name ${{ matrix.system_name }}
        
    - name: Package Build Output
      run: |
        # 检查 .output 目录是否存在内容
        if [ -d ".output" ] && [ "$(ls -A .output)" ]; then
          echo "✅ Found build output in .output directory:"
          ls -la .output/
          
          # 获取架构信息
          ARCH=$(uname -m)
          
          # 创建tar包文件名
          TAR_NAME="output_${{ matrix.system_name }}_${ARCH}.tar.gz"
          
          # 打包 .output 目录内容到当前目录（避免递归打包）
          tar -czf "${TAR_NAME}" -C .output .
          
          # 移动tar文件到 .output 目录
          mv "${TAR_NAME}" .output/
          
          echo "✅ Created package: ${TAR_NAME}"
          echo "Package size: $(du -h .output/${TAR_NAME} | cut -f1)"
        else
          echo "❌ No build output found in .output directory"
          exit 1
        fi
        
    - name: Verify Build Output
      run: |
        # 列出生成的文件
        ls -la .output/
        ls -la .output_logs/
        
        # 检查生成的tar.gz文件
        if ls .output/output_*.tar.gz 1> /dev/null 2>&1; then
          echo "✅ Found output package files:"
          ls -la .output/output_*.tar.gz
        else
          echo "❌ No output package files found"
          exit 1
        fi
        
        # 显示构建报告
        if [ -f .output_logs/build_report.txt ]; then
          echo "=== Build Report ==="
          cat .output_logs/build_report.txt
        fi
        
        if [ -f .output_logs/build_report.json ]; then
          echo "Build report exists"
          
          # 检查构建是否成功 - 使用单行Python脚本
          if python3 -c "import json; report = json.load(open('.output_logs/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; exit(1 if failed else 0)"; then
            echo "✅ All packages built successfully"
          else
            echo "❌ Some packages failed to build"
            python3 -c "import json; report = json.load(open('.output_logs/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; print(f'Failed packages: {failed}') if failed else None"
            exit 1
          fi
        else
          echo "❌ Build report not found"
          exit 1
        fi
        
    - name: Generate checksums
      run: |
        # 为生成的包文件生成 SHA256 校验和
        cd .output
        for file in output_*.tar.gz; do
          if [ -f "$file" ]; then
            sha256sum "$file" > "$file.sha256"
            echo "Generated checksum for $file:"
            cat "$file.sha256"
          fi
        done
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kvcache-cxx-packer-${{ matrix.system_name }}-${{ github.sha }}
        path: |
          .output/output_*.tar.gz
          .output/output_*.tar.gz.sha256
          .output_logs/
        retention-days: 30

    - name: Upload Build Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.system_name }}-${{ github.sha }}
        path: |
          .output_logs/
          .output/build_summary.txt
        retention-days: 7

    # 独立发布步骤：每个构建完成后立即发布
    - name: Create Individual Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        # 获取架构信息
        ARCH=$(uname -m)
        
        # 准备发布资源
        mkdir -p release-assets
        cp .output/output_*.tar.gz release-assets/
        cp .output/output_*.tar.gz.sha256 release-assets/
        
        echo "Release assets for ${{ matrix.system_name }}_${ARCH}:"
        ls -la release-assets/
        
        # 生成发布说明
        cat > release-notes.md << EOF
        ## KVCache C++ Packages Release ${{ github.ref_name }} - ${{ matrix.name }} (${ARCH})
        
        This release contains pre-built C++ packages for **${{ matrix.name }}** on **${ARCH}** architecture.
        
        ### 📦 Package Contents:
        EOF
        
        # 添加包列表到发布说明
        for file in release-assets/output_*.tar.gz; do
          if [ -f "$file" ]; then
            basename_file=$(basename "$file")
            echo "- \`$basename_file\` - ${{ matrix.name }} ${ARCH} build" >> release-notes.md
          fi
        done
        
        cat >> release-notes.md << 'EOF'
        
        ### 📚 Included Libraries:
        - etcd-cpp-apiv3 (master branch)
        - gflags (master branch)
        - glog (v0.6.0)
        - jsoncpp (master branch)
        - rdma-core (master branch)
        - yalantinglibs (main branch)
        - llvm-project (llvmorg-14.0.1 with Clang)
        
        ### 🚀 Usage:
        1. Download the package for your system and architecture
        2. Verify integrity: `sha256sum -c output_{system}_{arch}.tar.gz.sha256`
        3. Extract: `tar -xzf output_{system}_{arch}.tar.gz`
        4. Add to your CMake project:
           ```cmake
           set(CMAKE_PREFIX_PATH "/path/to/extracted" ${CMAKE_PREFIX_PATH})
           find_package(YourPackage REQUIRED)
           ```
        
        ### 🔧 Build Information:
        - Compiled with GCC 10
        - C++17/C++20 standard support
        - Static libraries included
        - Built using Docker containers for isolation and consistency
        
        ### 🔐 Security:
        SHA256 checksums are provided for integrity verification.
        EOF
        
        echo "Generated release notes:"
        cat release-notes.md
        
        # 将架构信息保存到环境变量文件
        echo "ARCH=${ARCH}" >> $GITHUB_ENV

    - name: Create Release for this Build
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        body_path: release-notes.md
        name: "${{ github.ref_name }}"
        tag_name: "${{ github.ref_name }}"
        generate_release_notes: true
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 