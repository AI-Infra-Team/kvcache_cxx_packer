name: Build and Release KVCache C++ Packages

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # 允许手动触发
    inputs:
      release_tag:
        description: 'Release tag (e.g., v0.1.0) for manual run'
        required: true
        type: string
      draft:
        description: 'Create release as draft'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Mark release as prerelease'
        required: false
        default: false
        type: boolean
      generate_release_notes:
        description: 'Auto generate release notes'
        required: false
        default: true
        type: boolean

# 添加权限设置
permissions:
  contents: write
  actions: read

jobs:
  prepare_release:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
    - name: Compute release tag
      id: vars
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ inputs.release_tag }}"
        else
          TAG="${GITHUB_REF_NAME}"
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Computed release tag: $TAG"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Ensure draft release exists
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG='${{ steps.vars.outputs.tag }}'
        echo "Ensuring draft release for tag: $TAG"
        if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
          echo "Release exists."
        else
          echo "Creating draft release $TAG"
          gh release create "$TAG" --title "KVCache C++ Packages $TAG" --notes "Initializing release..." --draft --repo "$GITHUB_REPOSITORY"
        fi

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Ubuntu 20.04"
            system_name: "ubuntu20.04"
          
          - name: "Ubuntu 22.04"
            system_name: "ubuntu22.04"
          
          - name: "ManyLinux 2014"
            system_name: "manylinux_2014"
    
    runs-on: ubuntu-latest

    name: Build on ${{ matrix.name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Verify Docker availability
      run: |
        # GitHub runners already have Docker available
        # Avoid using systemctl which isn't available on runners
        docker --version
        if ! docker info > /dev/null 2>&1; then
          echo "Docker daemon not available"
          exit 1
        fi
        
    - name: Build Packages using Container
      run: |
        # 显示系统信息
        echo "Building for system: ${{ matrix.system_name }}"
        echo "Architecture: $(uname -m)"
        
        # 使用 pack_in_container.py 脚本进行构建
        python3 pack_in_container.py --system-name ${{ matrix.system_name }}
        
    - name: Package Build Output
      run: |
        # 检查 .output 目录是否存在内容
        if [ -d ".output" ] && [ "$(ls -A .output)" ]; then
          echo "✅ Found build output in .output directory:"
          ls -la .output/
          
          # 获取架构信息
          ARCH=$(uname -m)
          
          # 创建tar包文件名
          TAR_NAME="output_${{ matrix.system_name }}_${ARCH}.tar.gz"
          
          # 打包 .output 目录内容到当前目录（避免递归打包）
          tar -czf "${TAR_NAME}" -C .output .
          
          # 移动tar文件到 .output 目录
          mv "${TAR_NAME}" .output/
          
          echo "✅ Created package: ${TAR_NAME}"
          echo "Package size: $(du -h .output/${TAR_NAME} | cut -f1)"
        else
          echo "❌ No build output found in .output directory"
          exit 1
        fi
        
    - name: Verify Build Output
      run: |
        # 列出生成的文件
        ls -la .output/
        ls -la .output_logs/
        
        # 检查生成的tar.gz文件
        if ls .output/output_*.tar.gz 1> /dev/null 2>&1; then
          echo "✅ Found output package files:"
          ls -la .output/output_*.tar.gz
        else
          echo "❌ No output package files found"
          exit 1
        fi
        
        # 显示构建报告
        if [ -f .output_logs/build_report.txt ]; then
          echo "=== Build Report ==="
          cat .output_logs/build_report.txt
        fi
        
        if [ -f .output_logs/build_report.json ]; then
          echo "Build report exists"
          
          # 检查构建是否成功 - 使用单行Python脚本
          if python3 -c "import json; report = json.load(open('.output_logs/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; exit(1 if failed else 0)"; then
            echo "✅ All packages built successfully"
          else
            echo "❌ Some packages failed to build"
            python3 -c "import json; report = json.load(open('.output_logs/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; print(f'Failed packages: {failed}') if failed else None"
            exit 1
          fi
        else
          echo "❌ Build report not found"
          exit 1
        fi
        
    - name: Generate checksums
      run: |
        # 为生成的包文件生成 SHA256 校验和
        cd .output
        for file in output_*.tar.gz; do
          if [ -f "$file" ]; then
            sha256sum "$file" > "$file.sha256"
            echo "Generated checksum for $file:"
            cat "$file.sha256"
          fi
        done

    - name: Upload assets to GitHub Release
      if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.release_tag || github.ref_name }}
      run: |
        echo "Uploading assets for $RELEASE_TAG"
        ls -la .output/
        # Upload tarballs and checksums; --clobber allows re-runs to overwrite
        gh release upload "$RELEASE_TAG" .output/output_*.tar.gz .output/output_*.tar.gz.sha256 --clobber --repo "$GITHUB_REPOSITORY"
        
    # Artifacts are uploaded directly to the Release; no need to upload to Actions artifacts

    - name: Upload Build Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.system_name }}-${{ github.sha }}
        path: |
          .output_logs/
          .output/build_summary.txt
        retention-days: 7

  # Finalize/publish release (no artifact download needed)
  finalize_release:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    needs: [prepare_release, build]
    runs-on: ubuntu-latest
    steps:
    - name: Generate release notes from uploaded assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ needs.prepare_release.outputs.tag }}
      run: |
        echo "Generating release notes for $RELEASE_TAG"
        # List assets via GitHub API
        ASSETS=$(gh release view "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" --json assets --jq '.assets[].name' || true)
        {
          echo "## KVCache C++ Packages Release $RELEASE_TAG"
          echo
          echo "This release contains pre-built C++ packages for multiple systems and architectures."
          echo
          echo "### 📦 Available Packages:"
          echo "$ASSETS" | awk 'NF{print "- `"$0"`"}'
          echo
          cat <<'MD'
        ### 📚 Included Libraries:
        - etcd-cpp-apiv3 (master branch)
        - gflags (master branch)
        - glog (v0.6.0)
        - jsoncpp (master branch)
        - rdma-core (master branch)
        - yalantinglibs (main branch)
        
        ### 🚀 Usage:
        1. Verify integrity: `sha256sum -c output_{system}_{arch}.tar.gz.sha256`
        2. Extract: `tar -xzf output_{system}_{arch}.tar.gz`
        3. Add to your CMake project:
           ```cmake
           set(CMAKE_PREFIX_PATH "/path/to/extracted" ${CMAKE_PREFIX_PATH})
           find_package(YourPackage REQUIRED)
           ```
        
        ### 🔧 Build Information:
        - Multiple system support: Ubuntu 20.04, Ubuntu 22.04, ManyLinux 2014
        - Compiled with GCC 10
        - C++17/C++20 standard support
        - Static libraries included
        - Built using Docker containers for isolation and consistency
        
        ### 🔐 Security:
        SHA256 checksums are provided for integrity verification.
        MD
        } > release-notes.md

        echo "Release notes preview:"
        cat release-notes.md

    - name: Publish or update release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ needs.prepare_release.outputs.tag }}
        IS_MANUAL: ${{ github.event_name == 'workflow_dispatch' }}
        INPUT_DRAFT: ${{ inputs.draft }}
        INPUT_PRERELEASE: ${{ inputs.prerelease }}
      run: |
        if [ "$IS_MANUAL" = "true" ]; then
          DRAFT="$INPUT_DRAFT"; PRERELEASE="$INPUT_PRERELEASE"
        else
          DRAFT="false"; PRERELEASE="false"
        fi
        echo "Finalizing release $RELEASE_TAG (draft=$DRAFT, prerelease=$PRERELEASE)"
        gh release edit "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" \
          --title "KVCache C++ Packages $RELEASE_TAG" \
          --notes-file release-notes.md \
          --draft="$DRAFT" \
          --prerelease="$PRERELEASE"
