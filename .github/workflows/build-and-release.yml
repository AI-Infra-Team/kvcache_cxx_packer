name: Build and Release KVCache C++ Packages

on:
  push:
    tags:
      - 'v*'  # ÂΩìÊé®ÈÄÅ‰ª• v ÂºÄÂ§¥ÁöÑÊ†áÁ≠æÊó∂Ëß¶Âèë
  workflow_dispatch:  # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

jobs:
  build:
    strategy:
      matrix:
        include:
          - runner: ubuntu-22.04
            arch: amd64
            platform: linux/amd64
          - runner: ubuntu-22.04  # ‰ΩøÁî®Êõ¥Êñ∞ÁöÑ Ubuntu ÁâàÊú¨ÔºåDocker ÂÆπÂô®‰ªç‰ΩøÁî® ubuntu:20.04
            arch: arm64
            platform: linux/arm64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set up QEMU (for ARM64 emulation)
      if: matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
        
    - name: Create output directory
      run: |
        mkdir -p .output
        
    - name: Run containerized build
      run: |
        # ‰∏∫‰∏çÂêåÊû∂ÊûÑËÆæÁΩÆ‰∏çÂêåÁöÑÂü∫Á°ÄÈïúÂÉè
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          BASE_IMAGE="arm64v8/ubuntu:20.04"
        else
          BASE_IMAGE="ubuntu:20.04"
        fi
        
        echo "Building for architecture: ${{ matrix.arch }}"
        echo "Using base image: $BASE_IMAGE"
        
        # ËøêË°åÊûÑÂª∫ËÑöÊú¨
        python3 pack_in_container.py --image "$BASE_IMAGE" --mount-dir .output
        
    - name: Verify build output
      run: |
        echo "Build output contents:"
        ls -la .output/
        
        # Ê£ÄÊü•ÊûÑÂª∫ÁªìÊûú
        if [ -f .output/build_summary.txt ]; then
          echo "Build summary:"
          cat .output/build_summary.txt
        fi
        
        if [ -f .output/build_report.json ]; then
          echo "Build report exists"
          echo "Build report content:"
          cat .output/build_report.json
          
          # Ê£ÄÊü•ÊûÑÂª∫ÊòØÂê¶ÊàêÂäü - ‰ΩøÁî®ÂçïË°åPythonËÑöÊú¨
          if python3 -c "import json; report = json.load(open('.output/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; exit(1 if failed else 0)"; then
            echo "‚úÖ All packages built successfully"
          else
            echo "‚ùå Some packages failed to build"
            python3 -c "import json; report = json.load(open('.output/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; print(f'Failed packages: {failed}') if failed else None"
            exit 1
          fi
        else
          echo "‚ùå Build report not found"
          exit 1
        fi
        
    - name: Package build artifacts
      run: |
        cd .output
        # ÂàõÂª∫ pack_{arch}.tar.gz ÂåÖ
        tar -czf ../pack_${{ matrix.arch }}.tar.gz .
        cd ..
        
        # ÊòæÁ§∫ÂåÖÁöÑÂ§ßÂ∞èÂíåÂÜÖÂÆπ
        echo "Package size:"
        ls -lh pack_${{ matrix.arch }}.tar.gz
        
        echo "Package contents:"
        tar -tzf pack_${{ matrix.arch }}.tar.gz | head -20
        
    - name: Generate checksums
      run: |
        # ÁîüÊàê SHA256 Ê†°È™åÂíå
        sha256sum pack_${{ matrix.arch }}.tar.gz > pack_${{ matrix.arch }}.tar.gz.sha256
        
        echo "Checksums:"
        cat pack_${{ matrix.arch }}.tar.gz.sha256
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kvcache-packages-${{ matrix.arch }}
        path: |
          pack_${{ matrix.arch }}.tar.gz
          pack_${{ matrix.arch }}.tar.gz.sha256
          .output/build_summary.txt
          .output/build_report.json
        retention-days: 30
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts -type f -name "*.tar.gz" -exec ls -lh {} \;
        find artifacts -type f -name "*.sha256" -exec cat {} \;
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generateReleaseNotes: true
        body: |
          ## KVCache C++ Packages Release ${{ github.ref_name }}
          
          This release contains pre-built C++ packages for multiple architectures.
          
          ### üì¶ Available Packages:
          - `pack_amd64.tar.gz` - x86_64 packages
          - `pack_arm64.tar.gz` - ARM64 packages
          
          ### üìö Included Libraries:
          - etcd-cpp-apiv3 (master branch)
          - gflags (master branch)
          - glog (v0.6.0)
          - jsoncpp (master branch)
          - rdma-core (master branch)
          - yalantinglibs (main branch)
          
          ### üöÄ Usage:
          1. Download the appropriate package for your architecture
          2. Verify integrity: `sha256sum -c pack_{arch}.tar.gz.sha256`
          3. Extract: `tar -xzf pack_{arch}.tar.gz`
          4. Add to your CMake project:
             ```cmake
             set(CMAKE_PREFIX_PATH "/path/to/extracted" ${CMAKE_PREFIX_PATH})
             find_package(YourPackage REQUIRED)
             ```
          
          ### üîß Build Information:
          - Built on Ubuntu 20.04
          - Compiled with GCC 10
          - C++17/C++20 standard support
          - Static libraries included
          
          ### üîê Security:
          SHA256 checksums are provided for integrity verification.
        files: |
          artifacts/kvcache-packages-amd64/pack_amd64.tar.gz
          artifacts/kvcache-packages-amd64/pack_amd64.tar.gz.sha256
          artifacts/kvcache-packages-arm64/pack_arm64.tar.gz
          artifacts/kvcache-packages-arm64/pack_arm64.tar.gz.sha256
          artifacts/kvcache-packages-amd64/build_summary.txt
          artifacts/kvcache-packages-amd64/build_report.json
        token: ${{ secrets.GITHUB_TOKEN }} 